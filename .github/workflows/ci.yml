name: CI/CD Pipeline

on:
  push:
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.25'
  BINARY_NAME: 'specgate'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${{ env.BINARY_NAME }}.exe"
        else
          BINARY_NAME="${{ env.BINARY_NAME }}"
        fi
        
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -o "${BINARY_NAME}" .
        
        # Create archive
        ARCHIVE_NAME="${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "$GOOS" = "windows" ]; then
          zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}" LICENSE README.md
          echo "ARCHIVE=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}" LICENSE README.md
          echo "ARCHIVE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ${{ env.ARCHIVE }}

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Install Grype
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

    - name: Build binary for SBOM
      run: |
        go build -ldflags="-s -w" -o ${{ env.BINARY_NAME }} .

    - name: Generate SBOM
      run: |
        syft ${{ env.BINARY_NAME }} -o spdx-json=sbom.spdx.json
        syft ${{ env.BINARY_NAME }} -o cyclonedx-json=sbom.cyclonedx.json
        syft ${{ env.BINARY_NAME }} -o syft-json=sbom.syft.json

    - name: Scan for vulnerabilities
      run: |
        grype ${{ env.BINARY_NAME }} -o json --file grype-report.json
        grype ${{ env.BINARY_NAME }} -o sarif --file grype.sarif
        grype ${{ env.BINARY_NAME }} -o table

    - name: Upload Grype vulnerability results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: grype.sarif

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom-reports
        path: |
          sbom.*.json
          grype-report.json
          grype.sarif

    - name: Upload SBOM to dependency submission API
      uses: advanced-security/spdx-dependency-submission-action@v0.1.1
      with:
        filePath: sbom.spdx.json

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, sbom, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate version
      id: version
      run: |
        # Generate version based on date and short commit
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Generated version: ${VERSION}"

    - name: Create checksums
      run: |
        cd artifacts
        find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
          if [ -f "$file" ]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
        # Move all archives to root level
        find . -name "*.tar.gz" -o -name "*.zip" -exec mv {} . \;

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        draft: true
        prerelease: false
        generate_release_notes: true
        files: |
          artifacts/*.tar.gz
          artifacts/*.zip
          artifacts/checksums.txt
          artifacts/sbom-reports/*
        body: |
          ## SpecGate Release ${{ steps.version.outputs.version }}
          
          ### Changes
          This release includes the latest changes from the main branch.
          
          ### Downloads
          Choose the appropriate binary for your platform:
          - **Linux (x64)**: `specgate-linux-amd64.tar.gz`
          - **Linux (ARM64)**: `specgate-linux-arm64.tar.gz`
          - **macOS (x64)**: `specgate-darwin-amd64.tar.gz`
          - **macOS (ARM64)**: `specgate-darwin-arm64.tar.gz`
          - **Windows (x64)**: `specgate-windows-amd64.zip`
          
          ### Verification
          Verify your download using the SHA256 checksums in `checksums.txt`.
          
          ### Security
          - SBOM (Software Bill of Materials) included
          - Vulnerability scan results included
          - All dependencies scanned for known vulnerabilities
          
          ### Installation
          ```bash
          # Linux/macOS
          tar -xzf specgate-*.tar.gz
          chmod +x specgate
          ./specgate --help
          
          # Windows
          # Extract specgate-windows-amd64.zip
          # Run specgate.exe --help
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}